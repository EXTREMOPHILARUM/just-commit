diff --git a/src/index.js b/src/index.js
index 5d46179..60d61ed 100644
--- a/src/index.js
+++ b/src/index.js
@@ -4,29 +4,30 @@ import { Hono } from 'hono'
 const app = new Hono()
 
 app.post('/', async (c) => {
-  const { diff } = c.req.json()
+  const data = await c.req.body
+  console.log(data)
+  const TEXT_GENERATION_MODEL_PROMPT = `You are an AI commit message generator. Your task is to analyze a git diff and produce a concise, informative commit message in the conventional format. Follow these guidelines:
+  1. **Structure:** 
+      * **Header:** Start with a brief summary (50 characters max) summarizing the change's primary purpose. Use imperative mood (e.g., 'Add', 'Fix', 'Refactor').
+      * **Body:** If needed, provide additional details in one or more paragraphs. Explain the context or technical aspects if the header isn't sufficient.
+  2. **Conciseness:** Aim for brevity while retaining essential information.
+  3. **Clarity:** Make sure the message is easy to understand for someone reviewing the commit history.
+  4. **Focus:**  Focus on the 'what' and 'why' of the change, not the 'how'.
+  5. **Format:**
+      * Separate the header and body with a blank line.
+      * Limit lines to 72 characters for readability.      
+  The input will be a git diff in the unified format. Your output should be a single string containing the well-formatted commit message.`
 
-  const response = await c.env.AI.run('@cf/meta/llama-2-7b-chat-int8', {
+  const sanitizedTextGenerationModelPrompt = TEXT_GENERATION_MODEL_PROMPT.replace(/\n/g, '');
+  const response = await c.env.AI.run('@hf/thebloke/deepseek-coder-6.7b-instruct-awq', {
     messages: [
       {
         role: "system",
-        content: `You are a git commit message generator. You will be provided with a git diff and must return only a single concise and informative commit message. The response should conform to the following specifications.
-                  type: type of commit
-                  scope: Short description of a section of the codebase enclosed in parenthesis followed by a colon and a space. Messages tend to be in the present and imperative.
-                  description: Short description of the code changes
-                  body: A longer description of the commit, providing additional context about the changes.
-                  Must be placed one empty line after the description.
-                  footer: Fixes issue #3 //example
-                  The footer should only contain additional issue references about the changes.
-                  Example:
-                  feat(homepage): Add carousel feature to showcase testimonials
-                  Implemented a carousel component on the homepage
-                  Added client testimonials section for improved user engagement
-                  Fixes #12`
+        content: sanitizedTextGenerationModelPrompt
       },
       {
         role: "user",
-        content: `Diff :\n\`\`\`\n${diff}\n\`\`\``
+        content: `Diff :\n\`\`\`\n${data}\n\`\`\``
       }
     ]
   })
